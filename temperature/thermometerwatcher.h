/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -a thermometerwatcher.h:thermometerwatcher.cpp -i types.h xml/thermometerwatcher.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef THERMOMETERWATCHER_H_1322748837
#define THERMOMETERWATCHER_H_1322748837

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include <QDBusVariant>

#include "adapter.h"
#include "device.h"
#include "manager.h"
#include "types.h"

class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
class QStringListModel;

#define COLLECTOR_OBJPATH "/test/watcher"

/*
 * Adaptor class for interface org.bluez.ThermometerWatcher
 */
class ThermometerWatcherAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.bluez.ThermometerWatcher")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.bluez.ThermometerWatcher\">\n"
"    <method name=\"MeasurementReceived\">\n"
"      <arg direction=\"in\" type=\"a{sv}\" name=\"measure\"/>\n"
"      <annotation value=\"QVariantMap\" name=\"com.trolltech.QtDBus.QtTypeName.In0\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")

    Q_PROPERTY(QString value READ get_value NOTIFY valueChangedSignal)
    Q_PROPERTY(QString statusMessage READ get_time_type NOTIFY valueChangedSignal)
    Q_PROPERTY(QObject* deviceModel READ getDeviceModel CONSTANT)

public:
    ThermometerWatcherAdaptor();
    virtual ~ThermometerWatcherAdaptor();

    QString get_value() const { return m_value; }
    QString get_time_type() const { return m_timetype; }
    void setStatusMessage(const QString &msg);
    QAbstractItemModel* getDeviceModel() const;
    void setAdapter();

signals:
    void valueChangedSignal();
public: // PROPERTIES
public Q_SLOTS: // METHODS
    void MeasurementReceived(const QVariantMap &measure);
    void setDevice(int index);
    void onDeviceCreated(const QDBusObjectPath &objPath);
    void onDeviceRemoved(const QDBusObjectPath &objPath);
    void onDevicePropertyChanged  (const QString &in0, const QDBusVariant &in1);
Q_SIGNALS: // SIGNALS
private slots:
    void delayedInitialization();

private:
    QString m_value;
    QString m_timetype;
    org::bluez::Manager* m_manager;
    org::bluez::Adapter* m_adapter;
    org::bluez::Device* m_selectedDevice;
    org::bluez::Device* m_pairingDevice;
    QList<org::bluez::Device*> m_devices;
    QStringListModel* m_deviceModel;

    void lookDevices(void);
    bool checkServices(org::bluez::Device* device) const;
    void destroyDevices();
    QStringList getDevicesName();
};

#endif
